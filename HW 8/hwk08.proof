(definec in (a :all x :tl) :bool
  (and (consp x)
       (or (== a (car x))
           (in a (cdr x)))))

(definec ap (x y :tl) :tl
  (if (endp x)
      y
    (cons (car x) (ap (cdr x) y))))

(definec rv (x :tl) :tl
  (if (endp x)
      x
    (ap (rv (cdr x)) (list (car x)))))

(definec rem-dups (x :tl) :tl
  (cond ((endp x) x)
        ((in (car x) (cdr x))
         (rem-dups (cdr x)))
        (t (cons (car x) (rem-dups (cdr x))))))

; You get this property for free, since we did it in class.  See
; l26.proof for the proof checker proof. You will have to do similar
; proofs for this homework.

(property ap-assoc (x y z :tl)
  (== (ap (ap x y) z)
      (ap x (ap y z))))

; The first two lemmas are proof checker proofs of in-ap using
; different induction schemes.

Lemma in-ap1:
(=> (^ (tlp x) (tlp y))
    (== (in a (ap x y))
        (v (in a x) (in a y))))

Proof by: Induction on (in a x)

Base Case 0:
(=> (! (tlp x))
    (=> (^ (tlp x) (tlp y))
    (== (in a (ap x y))
        (v (in a x) (in a y)))))
        
Exportation:
(=> (^ (! (tlp x))
       (tlp x)
       (tlp y))
    (== (in a (ap x y))
        (v (in a x) (in a y))))
        
Context:
C1. (! (tlp x))
C2. (tlp x)
C3. (tlp y)

Derived Context:
D1. nil {C1, C2}

QED

Base Case 1:
(=> (^ (tlp x) (! (consp x)))
    (=> (^ (tlp x) (tlp y))
    (== (in a (ap x y))
        (v (in a x) (in a y)))))

Exportation:
(=>
    (^
        (tlp x)
        (! (consp x))
        (tlp y))
    (== (in a (ap x y))
        (v (in a x) (in a y))))
        
Context:
C1. (tlp x)
C2. (! (consp x))
C3. (tlp y)

Goal: (== (in a (ap x y))
        (v (in a x) (in a y)))

Proof:
(== (in a (ap x y))
        (v (in a x) (in a y)))
== {def ap, C2}
(== (in a y)
        (v (in a x) (in a y)))
== {def in, C2}
(== (in a y)
        (v nil (in a y)))
== {pl}
(== (in a y)
        (in a y))

QED

Base Case 2:
(=> (^
        (tlp x)
        (consp x)
        (== a (car x)))
    (=> (^ (tlp x) (tlp y))
        (== (in a (ap x y))
            (v (in a x) (in a y)))))
            
Exportation:
(=>
    (^
        (tlp x)
        (consp x)
        (==  a (car x))
        (tlp y))
   (== (in a (ap x y))
            (v (in a x) (in a y))))
            
Context:
C1. (tlp x)
C2. (consp x)
C3. (== a (car x))
C4. (tlp y)

Goal:
(== (in a (ap x y))
            (v (in a x) (in a y)))

Proof:
(== (in a (ap x y))
            (v (in a x) (in a y)))
== {def ap, C2, cons axioms}
(== (in a (cons (car x) (ap (cdr x) y)))
            (v (in a x) (in a y)))
== {def in, cons axioms, C3}            
(== t
            (v (in a x) (in a y)))
== {def in, C2, C3}
(== t
            (v t (in a y)))
== {pl}
(== t t)
QED

Induction Case 1:
(=>
    (^
        (tlp x)
        (consp x)
        (! (== a (car x)))
        (=> (^ (tlp (cdr x)) (tlp y))
            (== (in a (ap (cdr x) y))
                (v (in a (cdr x)) (in a y)))))
    (=> (^ (tlp x) (tlp y))
        (== (in a (ap x y))
            (v (in a x) (in a y)))))
            
Exportation:
(=>
    (^
        (tlp x)
        (consp x)
        (! (== a (car x)))
        (=> (^ (tlp (cdr x)) (tlp y))
            (== (in a (ap (cdr x) y))
                (v (in a (cdr x)) (in a y))))
        (tlp y))
    (== (in a (ap x y))
            (v (in a x) (in a y))))

Context:
C1. (tlp x)
C2. (consp x)
C3. (! (== a (car x)))
C4. (=> (^ (tlp (cdr x)) (tlp y))
            (== (in a (ap (cdr x) y))
                (v (in a (cdr x)) (in a y))))
C5. (tlp y)

Derived Context:
D1. (tlp (cdr x)) {C1, C2, def tlp}
D2. (== (in a (ap (cdr x) y))
                (v (in a (cdr x)) (in a y))) {D1, C5, C4, mp}

Goal:
(== (in a (ap x y))
            (v (in a x) (in a y)))
Proof:
(== (in a (ap x y))
            (v (in a x) (in a y)))
== {def ap, C2} 
(== (in a (cons (car x) (ap (cdr x) y)))
            (v (in a x) (in a y)))
== {def in}
(== (and (consp (cons (car x) (ap (cdr x) y)))
       (or (== a (car (cons (car x) (ap (cdr x) y))))
           (in a (cdr (cons (car x) (ap (cdr x) y))))))
            (v (in a x) (in a y)))
== {def consp}
(== (and t
       (or (== a (car (cons (car x) (ap (cdr x) y))))
           (in a (cdr (cons (car x) (ap (cdr x) y))))))
            (v (in a x) (in a y)))
== {pl}
(== (or (== a (car (cons (car x) (ap (cdr x) y))))
           (in a (cdr (cons (car x) (ap (cdr x) y)))))
            (v (in a x) (in a y)))
== {cons axioms}
(== (or (== a (car x))
           (in a (ap (cdr x) y)))
            (v (in a x) (in a y)))
== {C3}
(== (or nil
           (in a (ap (cdr x) y)))
            (v (in a x) (in a y)))
== {pl}
(== (in a (ap (cdr x) y))
            (v (in a x) (in a y)))
== {D2}
(== (v (in a (cdr x)) (in a y))
            (v (in a x) (in a y)))
== {def in, C2}
(== (v (in a (cdr x)) (in a y))
            (v (v (== a (car x)) (in a (cdr x))) (in a y)))
== {C3, pl}
(== (v (in a (cdr x)) (in a y))
            (v (in a (cdr x)) (in a y)))
QED
QED

Lemma in-ap2:
(=> (^ (tlp x) (tlp y))
    (== (in a (ap x y))
        (v (in a x) (in a y))))

Proof by: Induction on (tlp x)

Base Case 0:
(=> (! (consp x))
    (=> (^ (tlp x) (tlp y))
    (== (in a (ap x y))
        (v (in a x) (in a y)))))

Exportation:
(=>
    (^
        (! (consp x))
        (tlp x)
        (tlp y))
    (== (in a (ap x y))
        (v (in a x) (in a y))))
        
Context:
C1. (! (consp x))
C2. (tlp x)
C3. (tlp y)

Goal:
(== (in a (ap x y))
        (v (in a x) (in a y)))

Proof:
(== (in a (ap x y))
        (v (in a x) (in a y)))
== {def ap, C1}
(== (in a y)
        (v (in a x) (in a y)))
== {def in, C1}
(== (in a y)
        (v nil (in a y)))
== {pl}
(== (in a y)
    (in a y))
QED

Induction Case 1:
(=> (^
        (consp x)
        (=> (^ (tlp (cdr x)) (tlp y))
            (== (in a (ap (cdr x) y))
                (v (in a (cdr x)) (in a y)))))
    (=> (^ (tlp x) (tlp y))
        (== (in a (ap x y))
            (v (in a x) (in a y)))))
            
Exportation:
(=>
    (^
        (consp x)
        (=> (^ (tlp (cdr x)) (tlp y))
            (== (in a (ap (cdr x) y))
                (v (in a (cdr x)) (in a y))))
        (tlp x)
        (tlp y))
    (== (in a (ap x y))
            (v (in a x) (in a y))))
            
Context:
C1. (consp x)
C2. (=> (^ (tlp (cdr x)) (tlp y))
            (== (in a (ap (cdr x) y))
                (v (in a (cdr x)) (in a y))))
C3. (tlp x)
C4. (tlp y)

Derived Context:
D1. (tlp (cdr x)) {C1, C3}
D2. (== (in a (ap (cdr x) y))
                (v (in a (cdr x)) (in a y))) {D1, C4, C2, mp}
                
Goal:
(== (in a (ap x y))
            (v (in a x) (in a y)))
            
Proof:
(in a (ap x y))
== {def ap, C1}
(in a (cons (car x) (ap (cdr x) y)))
== {def in}
(v (== a (car (cons (car x) (ap (cdr x) y)))) (in a (cdr (cons (car x) (ap (cdr x) y)))))
== {cons axioms}
(v (== a (car x)) (in a (ap (cdr x) y)))
== {D2}
(v (== a (car x)) (v (in a (cdr x)) (in a y)))
== {pl}
(v (v (== a (car x)) (in a (cdr x))) (in a y))
== {def in, C1}
(v (in a x) (in a y))

QED
 
QED
#|

 Which of the following induction schemes is not viable
 to prove Conjecture in-ap2?
 
 1. (ap x y)
 2. (in a y) <--

 Explain why not by showing where a proof attempt using the non-viable
 induction scheme fails.

 Base case:
 (=>
    (^
        (! (consp y))
        (tlp x)
        (tlp y))
    (== (in a (ap x y))
        (v (in a x) (in a y))))
        
To prove this base case, we start with the goal: 
(== (in a (ap x y))
        (v (in a x) (in a y)))
        
However, neither in nor ap can be expanded upon without more information on x, and this
a proof fails

|#

; Notice that you can use lemmas you have proved in subsequent proofs,
; e.g., you can use in-ap1 in the proof of in-rv or any other subsequent lemma.

Lemma in-rv:
(=> (tlp x)
    (== (in a (rv x))
        (in a x)))

Proof by: Induction on (rv x)

Base Case 0:
(=>
    (! (tlp x))
    (=> (tlp x)
        (== (in a (rv x))
            (in a x)))
)

Exportation:
(=>
    (^
        (! (tlp x))
        (tlp x)
    )
    (== (in a (rv x))
            (in a x))
)

Context:
C1. (! (tlp x))
C2. (tlp x)

Derived Context:
D1. nil {C1, C2}
QED

Base Case 1:
(=>
    (=> (tlp x)
        (endp x))
    (=> (tlp x)
        (== (in a (rv x))
            (in a x))))
            
Exportation:
(=>
    (^
        (=> (tlp x)
            (endp x))
        (tlp x)
    )
    (== (in a (rv x))
            (in a x))
)

Context:
C1. (=> (tlp x)
            (endp x))
C2. (tlp x)

Derived Context:
D1. (endp x) {C2, C1, mp}

Goal: 
(== (in a (rv x))
            (in a x))
            
Proof:
(in a (rv x))
== {D1, def rv}
(in a x)
QED

Induction Case 1:
(=>
    (^
        (=> (tlp x)
            (! (endp x)))
        (tlp x)
        (=> 
            (tlp (cdr x))
            (== (in a (rv (cdr x)))
                (in a (cdr x)))
        )
    )
    (=> (tlp x)
    (== (in a (rv x))
        (in a x)))
)


Exportation:
(=>
    (^
        (=> 
            (tlp x)
            (! (endp x))
        )
        (tlp x)
        (=> 
            (tlp (cdr x))
            (== (in a (rv (cdr x)))
                (in a (cdr x)))
        )
    )
    (== (in a (rv x))
            (in a x))
)

Context:
C1. (=> 
            (tlp x)
            (! (endp x))
        )
C2. (tlp x)
C3. (=> 
            (tlp (cdr x))
            (== (in a (rv (cdr x)))
                (in a (cdr x)))
        )
        
Derived Context:
D1. (! (endp x)) {C1, C2, mp}
D2. (tlp (cdr x)) {C2, D1}
D3. (== (in a (rv (cdr x)))
                (in a (cdr x))) {C3, D2, mp}
                
Goal:
(== (in a (rv x))
            (in a x))
            
Proof:
(in a (rv x))
== {def rv, D1}
(in a (ap (rv (cdr x)) (list (car x))))
== {lemma in-ap1 ((x (rv (cdr x))) (y (list (car x)))), C2, D2}
(v (in a (rv (cdr x))) (in a (list (car x))))
== {D3}
(v (in a (cdr x)) (in a (list (car x))))
== {pl}
(v (in a (list (car x))) (in a (cdr x)))
== {cons axioms}
(v (in a (cons (car x) nil)) (in a (cdr x)))
== {lemma in-ap1 ((x (cons (car x) nil)) (y (cdr x))), D2, cons axioms}
(in a (ap (cons (car x) nil) (cdr x)))
== {cons axioms, def ap}
(in a (cons (car x) (ap nil (cdr x))))
== {def ap}
(in a (cons (car x) (cdr x)))
== {cons axioms, C2, D1}
(in a x)
QED
QED

; This is a proof of in-rem-dups
; Use whatever induction scheme you like.
Lemma in-rem-dups:
(=> (tlp x)
    (== (in a (rem-dups x))
        (in a x)))

Proof by: Induction on (rem-dups x)

Base Case 0:
(=>
    (! (tlp x))
    (=> (tlp x)
        (== (in a (rem-dups x))
            (in a x)))
)

Exportation:
(=>
    (^
        (! (tlp x))
        (tlp x)
    )
    (== (in a (rem-dups x))
            (in a x)))
            
Context:
C1. (! (tlp x))
C2. (tlp x)

Derived Context:
D1. nil {C1, C2}

QED

Base Case 1:
(=>
    (=>
        (tlp x)
        (endp x)
    )
    (=> (tlp x)
        (== (in a (rem-dups x))
            (in a x)))
)

Exportation:
(=>
    (^
        (=>
            (tlp x)
            (endp x)
        )
        (tlp x)
    )
    (== (in a (rem-dups x))
            (in a x)))
            
Context:
C1. (=>
            (tlp x)
            (endp x)
        )
C2. (tlp x)

Derived Context:
D1. (endp x) {C1, C2, mp}

Goal:
(== (in a (rem-dups x))
            (in a x))
            
Proof:
(in a (rem-dups x))
== {def rem-dups, D1}
(in a x)
QED

Induction Case 1:
(=>
    (^
        (tlp x)
        (! (endp x))
        (in (car x) (cdr x))
        (=> (tlp (cdr x))
            (== (in a (rem-dups (cdr x)))
            (in a (cdr x)))))
    (=> (tlp x)
      (== (in a (rem-dups x))
          (in a x))))

Exportation:
(=>
    (^
        (tlp x)
        (! (endp x))
        (in (car x) (cdr x))
        (=> (tlp (cdr x))
          (== (in a (rem-dups (cdr x)))
              (in a (cdr x)))))
      (== (in a (rem-dups x))
        (in a x)))
        
Context:
C1. (tlp x)
C2. (! (endp x))
C3. (in (car x) (cdr x))
C4. (=> (tlp (cdr x))
            (== (in a (rem-dups (cdr x)))
            (in a (cdr x))))
            
Derived Context:
D1. (tlp (cdr x)) {C1}
D2. (== (in a (rem-dups (cdr x)))
            (in a (cdr x))) {D1, C4, mp}
D3. (consp x) {C1, C2}
            
Goal:
(== (in a (rem-dups x))
        (in a x))
        
Proof:
(== (in a (rem-dups x))
    (in a x))
== {def rem-dups, C2, C3}
(== (in a (rem-dups (cdr x)))
    (in a x))
== {D2}
(== (in a (cdr x))
    (in a x))
== {def in}
(== (in a (cdr x))
    (and (consp x)
       (or (== a (car x))
           (in a (cdr x)))))
== {D3}
(== (in a (cdr x))
    (and t
       (or (== a (car x))
           (in a (cdr x)))))
== {pl}
(== (in a (cdr x))
    (or (== a (car x))
        (in a (cdr x))))

QED 

Induction Case 2:
(=>
    (^
        (tlp x)
        (! (endp x))
        (! (in (car x) (cdr x)))
        (=> (tlp (cdr x))
            (== (in a (rem-dups (cdr x)))
            (in a (cdr x)))))
    (=> (tlp x)
      (== (in a (rem-dups x))
          (in a x))))

Exportation:
(=>
    (^
        (tlp x)
        (! (endp x))
        (! (in (car x) (cdr x)))
        (=> (tlp (cdr x))
          (== (in a (rem-dups (cdr x)))
              (in a (cdr x)))))
      (== (in a (rem-dups x))
        (in a x)))

Context:
C1. (tlp x)
C2. (! (endp x))
C3. (! (in (car x) (cdr x)))
C4. (=> (tlp (cdr x))
            (== (in a (rem-dups (cdr x)))
            (in a (cdr x))))
            
Derived Context:
D1. (tlp (cdr x)) {C1}
D2. (== (in a (rem-dups (cdr x)))
            (in a (cdr x))) {D1, C4, mp}
D3. (consp x) {C1, C2}
            
Goal:
(== (in a (rem-dups x))
        (in a x))

Proof:
(== (in a (rem-dups x))
        (in a x))
== {def rem-dups, C2, C3}
(== (in a (cons (car x) (rem-dups (cdr x))))
    (in a x))
== {def in, cons axioms}
(== (and (consp (cons (car x) (rem-dups (cdr x))))
       (or (== a (car x))
           (in a (rem-dups (cdr x)))))
    (and (consp x)
       (or (== a (car x))
           (in a (cdr x)))))
== {D3}
(== (and t
       (or (== a (car x))
           (in a (rem-dups (cdr x)))))
    (and t
       (or (== a (car x))
           (in a (cdr x)))))
== {pl}
(== (or (== a (car x))
           (in a (rem-dups (cdr x))))
       (or (== a (car x))
           (in a (cdr x))))
== {D2}
(== (or (== a (car x))
           (in a (cdr x)))
       (or (== a (car x))
           (in a (cdr x))))

QED
QED

#|

 Formalize this property and prove it using the above lemmas.
 Hint: do not use induction, just equational reasoning!

 (property (el :all a b c d :tl)
   (== (in el (rem-dups (rv (rem-dups (rv (ap (rv (ap (rv (ap a b)) (ap a c))) d))))))
       (v (in el a) (in el b) (in el c) (in el d))))

|#

Conjecture sanity-check:

(=>
    (^
        (allp el)
        (tlp a)
        (tlp b)
        (tlp c)
        (tlp d)
    )
    (== (in el (rem-dups (rv (rem-dups (rv (ap (rv (ap (rv (ap a b)) (ap a c))) d))))))
       (v (in el a) (in el b) (in el c) (in el d)))
)

Context:
C1. (allp el)
C2. (tlp a)
C3. (tlp b)
C4. (tlp c)
C5. (tlp d)

Goal:
(== (in el (rem-dups (rv (rem-dups (rv (ap (rv (ap (rv (ap a b)) (ap a c))) d))))))
       (v (in el a) (in el b) (in el c) (in el d)))
       
Proof:
(in el (rem-dups (rv (rem-dups (rv (ap (rv (ap (rv (ap a b)) (ap a c))) d))))))
== {lemma in-rem-dups ((a el) (x (rv (rem-dups (rv (ap (rv (ap (rv (ap a b)) (ap a c))) d))))))}
(in el (rv (rem-dups (rv (ap (rv (ap (rv (ap a b)) (ap a c))) d)))))
== {lemma in-rv ((a el) (x (rem-dups (rv (ap (rv (ap (rv (ap a b)) (ap a c))) d)))))}
(in el (rem-dups (rv (ap (rv (ap (rv (ap a b)) (ap a c))) d))))
== {lemma in-rem-dups ((a el) (x (rv (ap (rv (ap (rv (ap a b)) (ap a c))) d))))}
(in el (rv (ap (rv (ap (rv (ap a b)) (ap a c))) d)))
== {lemma in-rv ((a el) (x (ap (rv (ap (rv (ap a b)) (ap a c))) d)))}
(in el (ap (rv (ap (rv (ap a b)) (ap a c))) d))
== {lemma in-ap1 ((a el) (x (rv (ap (rv (ap a b)) (ap a c)))) (y d))}
(v (in el (rv (ap (rv (ap a b)) (ap a c)))) (in el d))
== {lemma in-rv ((a el) (x (ap (rv (ap a b)) (ap a c))))}
(v (in el (ap (rv (ap a b)) (ap a c))) (in el d))
== {lemma in-ap1 ((a el) (x (rv (ap a b))) (y (ap a c)))}
(v (v (in el (rv (ap a b))) (in el (ap a c))) (in el d))
== {lemma in-rv ((a el) (x (ap a b)))}
(v (v (in el (ap a b)) (in el (ap a c))) (in el d))
== {lemma in-ap1 ((a el) (x a) (y b))}
(v (v (v (in el a) (in el b)) (in el (ap a c))) (in el d))
== {lemma in-ap1 ((a el) (x a) (y c))}
(v (v (v (in el a) (in el b)) (v (in el a) (in el c))) (in el d))
== {pl}
(v (in el a) (in el b) (in el c) (in el d))
QED

Lemma ap-to-nil:
(=> (tlp x)
    (== (ap x nil)
        x))
        
Proof by: Induction on (tlp x)

Base Case 0:
(=>
    (! (consp x))
    (=> (tlp x)
        (== (ap x nil)
            x)))
            
Exportation:
(=> (^ (! (consp x))
        (tlp x))
    (== (ap x nil)
    x))
        
Context:
C1. (! (consp x))
C2. (tlp x)

Derived Context:
D1. (endp x) {C1, C2}

Goal:
(== (ap x nil) x)

Proof:
(ap x nil)
== {def ap, D1}
nil
== {D1}
x

QED

Induction Case 1:
(=> (^
    (consp x)
    (=> (tlp (cdr x))
        (== (ap (cdr x) nil)
            (cdr x))))
    (=> (tlp x)
        (== (ap x nil)
            x)))

Exportation:
(=> (^ (consp x)
        (=> (tlp (cdr x))
                (== (ap (cdr x) nil)
                    (cdr x)))
        (tlp x)
        )
    (== (ap x nil)
    x))
    
Context:
C1. (consp x)
C2. (=> (tlp (cdr x))
        (== (ap (cdr x) nil)
            (cdr x)))
C3. (tlp x)

Derived Context:
D1. (tlp (cdr x)) {C3}
D2. (== (ap (cdr x) nil)
        (cdr x)) {D1, C2, mp}
        
Goal:
(== (ap x nil)
    x)
    
Proof:
(ap x nil)
== {def ap, C1}
(cons (car x) (ap (cdr x) nil))
== {D2}
(cons (car x) (cdr x))
== {cons axioms}
x

QED
QED

Lemma ap-rv:
(=> (^ (tlp x)
       (tlp y))
    (== (rv (ap x y))
        (ap (rv y) (rv x))))
        
Proof by: Induction on (ap x y)

Base Case 0:
(=> (! (^ (tlp x)
          (tlp y)))
    (=> (^ (tlp x)
       (tlp y))
    (== (rv (ap x y))
        (ap (rv y) (rv x)))))
        
Exportation:
(=> (^ (! (^ (tlp x)
          (tlp y)))
       (tlp x)
       (tlp y))
    (== (rv (ap x y))
        (ap (rv y) (rv x))))
        
Context:
C1. (! (^ (tlp x)
          (tlp y)))
C2. (tlp x)
C3. (tlp y)

Derived Context:
D1. nil {C1, C2}

QED

Induction Case 1:
(=> (^ (tlp x)
       (tlp y)
       (endp x))
    (=> (^ (tlp x)
       (tlp y))
    (== (rv (ap x y))
        (ap (rv y) (rv x)))))
        
Exportation:
(=> (^ (tlp x)
       (tlp y)
       (endp x))
    (== (rv (ap x y))
        (ap (rv y) (rv x))))
        
Context:
C1. (tlp x)
C2. (tlp y)
C3. (endp x)
               
Derived Context:
D1. (tlp (cdr x)) {C1}
               
Goal:
(== (rv (ap x y))
        (ap (rv y) (rv x)))

Proof:
(== (rv (ap x y))
        (ap (rv y) (rv x)))
== {def ap, C3}
(== (rv y)
    (ap (rv y) (rv x)))
== {def rv, C3}
(== (rv y)
    (ap (rv y) x))
== {C3, lemma ap-to-nil ((x (rv y)))}
(== (rv y)
    (rv y))

QED

Induction Case 2:
(=> (^ (tlp x)
       (tlp y)
       (! (endp x))
       (=> (^ (tlp (cdr x))
              (tlp y))
           (== (rv (ap (cdr x) y))
                (ap (rv y) (rv (cdr x))))))
    (=> (^ (tlp x)
       (tlp y))
    (== (rv (ap x y))
        (ap (rv y) (rv x)))))
        
Exportation:
(=> (^ (tlp x)
        (tlp y)
        (! (endp x))
        (=> (^ (tlp (cdr x))
                (tlp y))
            (== (rv (ap (cdr x) y))
                (ap (rv y) (rv (cdr x))))))
    (== (rv (ap x y))
        (ap (rv y) (rv x))))
        
Context:
C1. (tlp x)
C2. (tlp y)
C3. (! (endp x))
C4. (=> (^ (tlp (cdr x))
                (tlp y))
            (== (rv (ap (cdr x) y))
                (ap (rv y) (rv (cdr x)))))
                
Derived Context:
D1. (tlp (cdr x)) {C1}
D2. (== (rv (ap (cdr x) y))
                (ap (rv y) (rv (cdr x)))) {D1, C4, mp}
                
Goal:
(== (rv (ap x y))
        (ap (rv y) (rv x)))
        
Proof:
(rv (ap x y))
== {def ap, C3}
(rv (cons (car x) (ap (cdr x) y)))
== {def rv, cons axioms}
(ap (rv (ap (cdr x) y)) (list (car x)))
== {D2}
(ap (ap (rv y) (rv (cdr x))) (list (car x)))
== {lemma ap-assoc ((x (rv y)) (y (rv (cdr x))) (z (list (car x))))}
(ap (rv y) (ap (rv (cdr x)) (list (car x))))
== {def rv, C3}
(ap (rv y) (rv x))


QED
QED


; Prove the following lemma. You will need helper lemmas.
; Hint: the lecture notes are your friend.
Lemma rv-rv:
(=> (tlp x)
    (== (rv (rv x))
        x))
        
Proof by: Induction on (tlp x)

Base Case 0:
(=>
    (! (consp x))
    (=> (tlp x)
    (== (rv (rv x))
        x)))
        
Exportation:
(=>
    (^
        (! (consp x))
        (tlp x))
    (== (rv (rv x))
        x))
        
Context:
C1. (! (consp x))
C2. (tlp x)

Derived Context:
D1. (endp x) {C1, C2}

Goal:
(== (rv (rv x))
        x)
Proof:
(rv (rv x))
== {def rv, D1}
(rv x)
== {def rv, D1}
x

QED

Induction Case 1:
(=>
    (^
        (consp x)
        (=> (tlp (cdr x))
            (== (rv (rv (cdr x)))
                (cdr x))))
    (=> (tlp x)
    (== (rv (rv x))
        x)))
        
Exportation:
(=>
    (^
        (consp x)
        (=> (tlp (cdr x))
            (== (rv (rv (cdr x)))
                (cdr x)))
        (tlp x))
    (== (rv (rv x))
        x))
        
Context:
C1. (consp x)
C2. (=> (tlp (cdr x))
            (== (rv (rv (cdr x)))
                (cdr x)))
C3. (tlp x)

Derived Context:
D1. (tlp (cdr x)) {C1, C3}
D2. (== (rv (rv (cdr x)))
        (cdr x)) {D1, C2, mp}
        
Goal: (== (rv (rv x))
          x)
Proof:
(rv (rv x))
== {def rv, C1}
(rv (ap (rv (cdr x)) (list (car x))))
== {lemma ap-rv ((x (rv (cdr x))) (y (list (car x))))}
(ap (rv (list (car x))) (rv (rv (cdr x))))
== {def rv, cons axioms}
(ap (ap (rv nil) (list (car x))) (rv (rv (cdr x))))
== {D2}
(ap (ap (rv nil) (list (car x))) (cdr x))
== {def rv}
(ap (ap nil (list (car x))) (cdr x))
== {def ap}
(ap (list (car x)) (cdr x))
== {def ap, cons axioms}
(cons (car x) (ap nil (cdr x)))
== {def ap}
(cons (car x) (cdr x))
== {cons axioms}
x

QED
QED

; Here is another function that your mentor wants you to reason about.
(definec make-n-xs (n :nat x :all) :tl
  (if (zp n)
      nil
    (cons x (make-n-xs (1- n) x))))

; She claims that the following is a theorem you should prove.
; Actually, it isn't a theorem. Think about why and change the RHS as
; little as possible to make this a theorem and prove it. You can only
; change the RHS.
;
; The prove it using whatever induction scheme you like.
Lemma in-make-n-xs:
(=> (natp x)
    (=> (in a (make-n-xs x y))
        (== a y)))

Proof by: Induction on (make-n-xs x y)

Base Case 0:
(=> (! (natp x))
	(=> (natp x)
    	(== (^ (in a (make-n-xs x y)) (< 0 x))
        	(== a y))))
        
Exportation:
(=> (^	(! (natp x))
		(natp x))
    (== (^ (in a (make-n-xs x y)) (< 0 x))
        (== a y)))
    
Context:
C1. (! (natp x))
C2. (natp x)

Derived Context:
D1. nil {C1, C2}

QED

Base Case 1:
(=> (^ (natp x) (zp x))
	(=> (natp x)
    	(=> (in a (make-n-xs x y))
        	(== a y))))
        
Exportation:
(=> (^	(natp x)
		(zp x)
    	(in a (make-n-xs x y)))
    (== a y))
    
Context:
C1. (natp x)
C2. (zp x)
C3. (in a (make-n-xs x y))

Derived Context:
D1. (in a nil) { def make-n-xs, C2, C3 }
D2. nil { def in, D1 }

QED

Induction Case 1:
(=>	(^	(natp x)
		(! (zp x))
		(=> (natp (+ -1 x))
        	(=> (in a (make-n-xs (+ -1 x) y)) (== a y))))
    (=> (natp x) (=> (in a (make-n-xs x y)) (== a y))))

Exportation:
(=>	(^	(natp x)
		(! (zp x))
		(=> (^	(natp (+ -1 x))
        		(in a (make-n-xs (+ -1 x) y)))
            (== a y))
        (in a (make-n-xs x y)))
    (== a y))

Context:
C1. (natp x)
C2. (! (zp x))
C3. (=> (^	(natp (+ -1 x))
        	(in a (make-n-xs (+ -1 x) y)))
        (== a y))
C4. (in a (make-n-xs x y))

Derived Context:
D1. (natp (+ -1 x)) { C2 }
D2. (in a (cons y (make-n-xs (1- x) y))) { def make-n-xs, C2, C4 }
D3. (v (== a y) (in a (make-n-xs (1- x) y))) { def in, cons axioms, D2 }
D4. (v (== a y) (== a y)) { mp, C3, D3, D1 }

Goal: (== a y)

QED
QED

; Your mentor is busy building her compiler and you have some free
; time. After doing some LeetCode exercises, you get bored and decide
; to go talk to the AI team. They are building an AI that can solve
; recurrence relations. They gave you a few examples that they want to
; be able to solve.
;
; Find closed form solutions and prove them correct.

(definec r1 (n :nat) :pos
  (if (zp n)
      1
    (+ (r1 (1- n)) (expt 2 n))))

; Use whatever induction scheme you like
Lemma r1-closed-form:
(=> (natp x)
	(= (r1 x)
   	(1- (expt 2 (1+ x)))))

Proof by: Induction on (r1 x)

Base case 0:
(=> (! (natp x))
	(=> (natp x)
    	(= (r1 x) (1- (expt 2 (1+ x))))))

Exportation:
(=> (^ (! (natp x))
		(natp x))
     (= (r1 x) (1- (expt 2 (1+ x)))))
     
Context:
C1. (! (natp x))
C2. (natp x)

Derived Context:
D1. nil {C1, C2}

QED 

Base case 1:
(=> (^ 
	(natp x)
	(zp x))
	(=> 
		(natp x)
		(= (r1 x)
			(1- (expt 2 (1+ x)))
		)
))

Exportation:
(=> (^ (natp x)
	   (zp x))
	 (= (r1 x)
	 	(1- (expt 2 (1+ x)))
))

Context:
C1. (natp x)
C2. (zp x)

Derived Context:
D1. (= 1 (1- (expt 2 (1+ x)))) {C1, C2, Arith}
D2. (= 1 (r1 x)) {C1, C2, Arith, Def r1}

Goal:
(= (r1 x) (1- (expt 2 (1+ x))))

Proof:
(= (r1 x) (1- (expt 2 (1+ x))))
== { D1, D2 }
(= 1 1)
== {Obvious}
t
QED

Induction Case 0:
(=>
  (^ (NATP X) (! (ZP X))
       (=> (NATP (+ -1 X)) (= (R1 (+ -1 X)) (+ -1 (EXPT 2 (+ 1 -1 X))))))
  (=> (NATP X) (= (R1 X) (+ -1 (EXPT 2 (+ 1 X))))))

Exportation:
(=> (^ (natp x)
	   (! (zp x))
       (=> (natp (1- x))
        	(= (r1 (1- x))
		    (1- (expt 2 (1- (1+ x))))
		)))
	(= (r1 x)
	 	(1- (expt 2 (1+ x)))
))


Context:
C1. (natp x)
C2. (! (zp x))
C3. (=> (natp (1- x))
        	(= (r1 (1- x))
		    (1- (expt 2 (1- (1+ x))))))

Derived Context:
D1. (= (r1 x) (+ (r1 (1- x)) (expt 2 x))) { Def r1, C2 }
D2. (natp (1- x)) { C1, C2 }
D3. (= (r1 (1- x))
		    (1- (expt 2 x))) { C3, D2, MP, Arith }

Goal: 
(= (r1 x)
	 	(1- (expt 2 (1+ x))))

Proof:
(= (r1 x)
	 	(1- (expt 2 (1+ x))))
== { D1 }
(= (+ (r1 (1- x)) (expt 2 x)) (1- (expt 2 (1+ x))))
== { D3 }
(= (+ (1- (expt 2 x)) (expt 2 x)) (1- (expt 2 (1+ x))))
== { Arith }
t

QED
QED


(definec r2 (n :pos) :int
  :skip-tests t
  (match n
    (1 0)
    (2 3)
    (3 8)
    (& (+ (r2 (1- n)) (r2 (- n 2)) (- (r2 (- n 3))) 4))))

; Use whatever induction scheme you like
Lemma r2-closed-form:
(=> (posp n)
	(= (r2 n)
   	(1- (expt n 2))))

Proof by: Induction on (r2 n)

Base case 0: 
(=> (! (posp n))
	(=> (posp n)
	(= (r2 n)
   		(1- (expt n 2)))))

Exportation:
(=> (^ (! (posp n))
		(posp n))
	(= (r2 n)
   (1- (expt n 2)))
)

Context:
C1. (posp n)
C2. (! (posp n))

Derived Context:
D1. nil { C1, C2 }

QED

Base Case 1:
(IMPLIES (AND (POSP N) (EQL N 1))
          (IMPLIES (POSP N) (= (R2 N) (+ -1 (EXPT N 2)))))

Exportation:
(=> (^ (posp n)
	   (= 1 n))
   (= (r2 n)
   	(1- (expt n 2))))
   	
Context:
C1. (posp n)
C2. (= 1 n)

Derived Context:
D1. (= 0 (r2 n)) { C1, C2, def r2 }
D2. (= 0 (1- (expt n 2))) { C1, C2, Arith }

Goal:
 (= (r2 n)
   	(1- (expt n 2)))

Proof:
(= (r2 n)
   	(1- (expt n 2)))
== { D1, D2 }
(= 0 0)
== { Obvious }
t

QED

Base Case 2:
 (IMPLIES (AND (POSP N) (EQL N 2))
          (IMPLIES (POSP N) (= (R2 N) (+ -1 (EXPT N 2)))))

Exportation:
(=> (^ (posp n)
	   (= 2 n))
   (= (r2 n)
   	(1- (expt n 2))))
   	
Context:
C1. (posp n)
C2. (= 2 n)

Derived Context:
D1. (= 3 (r2 n)) { C1, C2, def r2 }
D2. (= 3 (1- (expt n 2))) { C1, C2, Arith }

Goal:
 (= (r2 n)
   	(1- (expt n 2)))

Proof:
(= (r2 n)
   	(1- (expt n 2)))
== { D1, D2 }
(= 3 3)
== { Obvious }
t

QED

Base Case 3:
 (IMPLIES (AND (POSP N) (EQL N 3))
          (IMPLIES (POSP N) (= (R2 N) (+ -1 (EXPT N 2)))))

Exportation:
(=> (^ (posp n)
	   (= 3 n))
   (= (r2 n)
   	(1- (expt n 2))))
   	
Context:
C1. (posp n)
C2. (= 3 n)

Derived Context:
D1. (= 8 (r2 n)) { C1, C2, def r2 }
D2. (= 8 (1- (expt n 2))) { C1, C2, Arith }

Goal:
 (= (r2 n)
   	(1- (expt n 2)))

Proof:
(= (r2 n)
   	(1- (expt n 2)))
== { D1, D2 }
(= 8 8)
== { Obvious }
t

QED
Induction Case 0:
(IMPLIES
  (AND (POSP N) (NOT (EQL N 1)) (NOT (EQL N 2)) (NOT (EQL N 3)) (NOT NIL)
       (IMPLIES (POSP (+ -1 N)) (= (R2 (+ -1 N)) (+ -1 (EXPT (+ -1 N) 2))))
       (IMPLIES (POSP (+ -2 N)) (= (R2 (+ -2 N)) (+ -1 (EXPT (+ -2 N) 2))))
       (IMPLIES (POSP (+ -3 N)) (= (R2 (+ -3 N)) (+ -1 (EXPT (+ -3 N) 2)))))
  (IMPLIES (POSP N) (= (R2 N) (+ -1 (EXPT N 2)))))

Exportation:
(=> (^ (posp n)
	   (! (= n 1))
       (! (= n 2))
       (! (= n 3))
       (! nil)
       (IMPLIES (POSP (+ -1 N)) (= (R2 (+ -1 N)) (+ -1 (EXPT (+ -1 N) 2))))
       (IMPLIES (POSP (+ -2 N)) (= (R2 (+ -2 N)) (+ -1 (EXPT (+ -2 N) 2))))
       (IMPLIES (POSP (+ -3 N)) (= (R2 (+ -3 N)) (+ -1 (EXPT (+ -3 N) 2)))))
   (= (r2 n)
   	(1- (expt n 2))))
   	
Context:
C1. (posp n)
C2. (! (= n 1))
C3. (! (= n 2))
C4. (! (= n 3))
C5. (! nil)
C6. (IMPLIES (POSP (+ -1 N)) (= (R2 (+ -1 N)) (+ -1 (EXPT (+ -1 N) 2))))
C7. (IMPLIES (POSP (+ -2 N)) (= (R2 (+ -2 N)) (+ -1 (EXPT (+ -2 N) 2))))
C8. (IMPLIES (POSP (+ -3 N)) (= (R2 (+ -3 N)) (+ -1 (EXPT (+ -3 N) 2))))

Derived Context:
D1. (> n 3) {C1, C2, C3, C4}
D2. (posp (1- n)) {D1}
D3. (posp (+ -2 n)) {D1}
D4. (posp (+ -3 n)) {D1}
D5. (= (R2 (+ -1 N)) (+ -1 (EXPT (+ -1 N) 2))) {C6, D2, MP}
D6. (= (R2 (+ -2 N)) (+ -1 (EXPT (+ -2 N) 2))) {C7, D3, MP}
D7. (= (R2 (+ -3 N)) (+ -1 (EXPT (+ -3 N) 2))) {C8, D4, MP}

Goal:
 (= (r2 n)
   	(1- (expt n 2)))

Proof:
(= (r2 n)
   	(1- (expt n 2)))
== { D5, D6, D7 }
(== (+ (r2 (1- n)) (r2 (- n 2)) (- (r2 (- n 3))) 4) (1- (expt n 2)))
== {Arith}
t
QED
QED


; After doing the above proofs, you decide to see if ACL2s can do this
; for you.
;
; Write Lemma r1-closed-form in ACL2s as a property and see if ACL2s
; can prove it automatically (use .lisp file for that).

(property (n :nat)
  (= (r1 n)
     (1- (expt 2 (1+ n)))))

; Write Lemma r2-closed-form in ACL2s as a property and see if ACL2s
; can prove it automatically (use .lisp file for that).

(property (n :pos)
  (= (r2 n)
     (1- (expt n 2))))

; This gives you an idea, which you pitch to the AI team. To test
; their system, they can use their AI solver to propose solutions to
; recurrences, which then get translated to ACL2s properties that can
; be checked using testing and/or theorem proving.
;
; They try it and find lots of bugs, ah the joys of AI.
;
; The one downside of your coop experience is you have to figure out
; whether to accept the return offer from the compiler team or the AI
; team. Which one will you choose? Tell us below. (Free points)

"The compiler team"
